# 
# Copyright 2022 Chair of EDA, Technical University of Munich
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#       http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#!/usr/bin/env python3

import argparse
import pathlib
import pickle
import errno
import os
import shutil

from .CodeGenerator import CodeGenerator

def main(model_, printerGen_=False):

    print()
    print("-- Creating output directories --")
    curDir = pathlib.Path(__file__).parents[0]
    outDir = createOrReplaceDir(curDir/ "out" / model_.name)
    createOrReplaceDir(outDir / "src")
    createOrReplaceDir(outDir / "include")

    print()
    print("-- Generating code for trace-monitor --")
    codeGen = CodeGenerator(curDir / "templates", outDir)
    codeGen.generateMonitor(model_)

    if printerGen_:
        print()
        print("-- Generating code for trace-printer --")
        codeGen.generatePrinter(model_)
        
##  Helper functions

def createOrReplaceDir(dir_):
    try:
        pathlib.Path(dir_).mkdir(parents=True)
    except OSError as e:
        if e.errno == errno.EEXIST:
            # TODO: Better handling here? Wait for user input?
            print("WARNING: %s folder exists and is replaced" %(os.path.basename(os.path.normpath(str(dir_))))) 
            shutil.rmtree(dir_)
        else:
            raise
    return dir_

# Run this if called stand-alone (i.e. this file is directly called)
if __name__ == '__main__':

    # Parse command line arguments
    argParser = argparse.ArgumentParser()
    argParser.add_argument("model", help="File containing the trace-model (generated by Trace-Generator frontend)")
    argParser.add_argument("-p", "--printer", action="store_true", help="Switch to generate trace printer")
    args = argParser.parse_args()
    
    # Load model from file
    modelFile = pathlib.Path(args.model).resolve()
    if not modelFile.is_file():
        raise TypeError("Specified model (%s) does not exist!" % modelFile)
    with modelFile.open('rb') as f:
        model = pickle.load(f)

    # Call main routine of monitor_gen backend
    main(model, args.printer)
